from google.cloud import bigquery
client = bigquery.Client()
dataset_id = 'florida_real_estate'

dataset_ref = client.dataset(dataset_id)
job_config = bigquery.LoadJobConfig()
job_config.schema = [
bigquery.SchemaField("CO_NO","INTEGER","REQUIRED","County Number"),
bigquery.SchemaField("PARCEL_ID","STRING","REQUIRED","Parcel Identification Code"),
bigquery.SchemaField("FILE_T","STRING","NULLABLE","	File (Roll) Type"),
bigquery.SchemaField("ASMNT_YR","INTEGER","REQUIRED","Assessment Year"),
bigquery.SchemaField("BAS_STRT","STRING","NULLABLE","Basic Stratum"),
bigquery.SchemaField("ATV_STRT","STRING","NULLABLE","Active Stratum"),
bigquery.SchemaField("GRP_NO","STRING","NULLABLE","Group Number"),
bigquery.SchemaField("DOR_UC","STRING","NULLABLE","DOR Land Use Code"),
bigquery.SchemaField("PA_UC","STRING","NULLABLE","Property Appraiser Land Use Code"),
bigquery.SchemaField("SPASS_CD","STRING","NULLABLE","Special Assessment Code"),
bigquery.SchemaField("JV","INTEGER","NULLABLE","Just Value"),
bigquery.SchemaField("JV_CHNG","INTEGER","NULLABLE","Just Value Change"),
bigquery.SchemaField("JV_CHNG_CD","STRING","NULLABLE","Just Value Change Code"),
bigquery.SchemaField("AV_SD","INTEGER","NULLABLE","Assessed Value – School District"),
bigquery.SchemaField("AV_NSD","INTEGER","NULLABLE","Assessed Value – Non-School District"),
bigquery.SchemaField("TV_SD","INTEGER","NULLABLE","Taxable Value – School District"),
bigquery.SchemaField("TV_NSD","INTEGER","NULLABLE","Taxable Value – Non-School District"),
bigquery.SchemaField("JV_HMSTD","INTEGER","NULLABLE","Just Value – Homestead Property"),
bigquery.SchemaField("AV_HMSTD","INTEGER","NULLABLE","Assessed Value – Homestead Property"),
bigquery.SchemaField("JV_NON_HMSTD_RESD","INTEGER","NULLABLE","Just Value – Non-Homestead Residential Property"),
bigquery.SchemaField("AV_NON_HMSTD_RESD","INTEGER","NULLABLE","Assessed Value – Non-Homestead Residential Property"),
bigquery.SchemaField("JV_RESD_NON_RESD","INTEGER","NULLABLE","Just Value – Residential and Non-Residential Property"),
bigquery.SchemaField("AV_RESD_NON_RESD","INTEGER","NULLABLE","Assessed Value – Residential and Non-Residential Property"),
bigquery.SchemaField("JV_CLASS_USE","INTEGER","NULLABLE","Just Value – Classified Use (Agricultural Land Value)"),
bigquery.SchemaField("AV_CLASS_USE","INTEGER","NULLABLE","Assessed Value – Classified Use (Agricultural Land Value)"),
bigquery.SchemaField("JV_H2O_RECHRGE","INTEGER","NULLABLE","Just Value – High-water Recharge (Land Value)"),
bigquery.SchemaField("AV_H2O_RECHRGE","INTEGER","NULLABLE","Assessed Value – High-water Recharge (Land Value)"),
bigquery.SchemaField("JV_CONSRV_LND","INTEGER","NULLABLE","Just Value – Conservation Land"),
bigquery.SchemaField("AV_CONSRV_LND","INTEGER","NULLABLE","Assessed Value – Conservation Land"),
bigquery.SchemaField("JV_HIST_COM_PROP","INTEGER","NULLABLE","Just Value – Historic Commercial Property"),
bigquery.SchemaField("AV_HIST_COM_PROP","INTEGER","NULLABLE","Assessed Value – Historic Commercial Property"),
bigquery.SchemaField("JV_HIST_SIGNF","INTEGER","NULLABLE","Just Value – Historically Significant Property"),
bigquery.SchemaField("AV_HIST_SIGNF","INTEGER","NULLABLE","Assessed Value – Historically Significant Property"),
bigquery.SchemaField("JV_WRKNG_WTRFNT","INTEGER","NULLABLE","Just Value – Working Waterfront Property"),
bigquery.SchemaField("AV_WRKNG_WTRFNT","INTEGER","NULLABLE","Assessed Value – Working Waterfront Property"),
bigquery.SchemaField("NCONST_VAL","INTEGER","NULLABLE","New Construction Value"),
bigquery.SchemaField("DEL_VAL","INTEGER","NULLABLE","Deletion Value"),
bigquery.SchemaField("PAR_SPLT","STRING","NULLABLE","Parcel Split/Combine Flag"),
bigquery.SchemaField("DISTR_CD","STRING","NULLABLE","Disaster Code"),
bigquery.SchemaField("DISTR_YR","STRING","NULLABLE","Disaster Year"),
bigquery.SchemaField("LND_VAL","INTEGER","NULLABLE","Land Value"),
bigquery.SchemaField("LND_UNTS_CD","STRING","NULLABLE","Land Unit Code"),
bigquery.SchemaField("NO_LND_UNTS","STRING","NULLABLE","Number of Land Units"),
bigquery.SchemaField("LND_SQFOOT","INTEGER","NULLABLE","Land Square Footage"),
bigquery.SchemaField("DT_LAST_INSPT","INTEGER","NULLABLE","Date of Last Physical Inspection"),
bigquery.SchemaField("IMP_QUAL","STRING","NULLABLE","Improvement Quality"),
bigquery.SchemaField("CONST_CLASS","STRING","NULLABLE","Construction Class"),
bigquery.SchemaField("EFF_YR_BLT","STRING","NULLABLE","Effective Year Built"),
bigquery.SchemaField("ACT_YR_BLT","STRING","NULLABLE","Actual Year Built"),
bigquery.SchemaField("TOT_LVG_AREA","STRING","NULLABLE","Total Living or Usable Area"),
bigquery.SchemaField("NO_BULDNG","STRING","NULLABLE","Number of Buildings"),
bigquery.SchemaField("NO_RES_UNTS","STRING","NULLABLE","Number of Residential Units"),
bigquery.SchemaField("SPEC_FEAT_VAL","STRING","NULLABLE","Special Feature Value"),
bigquery.SchemaField("MULTI_PAR_SAL1","STRING","NULLABLE","Multi-Parcel Sale – Sale 1"),
bigquery.SchemaField("QUAL_CD1","STRING","NULLABLE","Qualification Code – Sale 1"),
bigquery.SchemaField("VI_CD1","STRING","NULLABLE","Vacant/Improved Code – Sale 1"),
bigquery.SchemaField("SALE_PRC1","INTEGER","NULLABLE","Sale Price – Sale 1"),
bigquery.SchemaField("SALE_YR1","INTEGER","NULLABLE","Sale Year – Sale 1"),
bigquery.SchemaField("SALE_MO1","INTEGER","NULLABLE","Sale Month – Sale 1"),
bigquery.SchemaField("OR_BOOK1","STRING","NULLABLE","Official Record Book Number – Sale 1"),
bigquery.SchemaField("OR_PAGE1","STRING","NULLABLE","Official Record Page Number – Sale 1"),
bigquery.SchemaField("CLERK_NO1","STRING","NULLABLE","Clerk’s Instrument Number – Sale 1"),
bigquery.SchemaField("SAL_CHNG_CD1","STRING","NULLABLE","Sale Change Code – Sale 1"),
bigquery.SchemaField("MULTI_PAR_SAL2","STRING","NULLABLE","Multi-Parcel – Sale 2"),
bigquery.SchemaField("QUAL_CD2","STRING","NULLABLE","Qualification Code – Sale 2"),
bigquery.SchemaField("VI_CD2","STRING","NULLABLE","Vacant/Improved Code – Sale 2"),
bigquery.SchemaField("SALE_PRC2","INTEGER","NULLABLE","Sale Price – Sale 2"),
bigquery.SchemaField("SALE_YR2","INTEGER","NULLABLE","Sale Year – Sale 2"),
bigquery.SchemaField("SALE_MO2","INTEGER","NULLABLE","Sale Month – Sale 2"),
bigquery.SchemaField("OR_BOOK2","STRING","NULLABLE","Official Record Book Number – Sale 2"),
bigquery.SchemaField("R_PAGE2","STRING","NULLABLE","Official Record Page Number – Sale 2"),
bigquery.SchemaField("CLERK_NO2","STRING","NULLABLE","Clerk's Instrument Number – Sale 2"),
bigquery.SchemaField("SAL_CHNG_CD2","STRING","NULLABLE","Sale Change Code – Sale 2"),
bigquery.SchemaField("OWN_NAME","STRING","NULLABLE","Owner’s Name"),
bigquery.SchemaField("OWN_ADDR1","STRING","NULLABLE","Owner's Mailing Address – Line 1"),
bigquery.SchemaField("OWN_ADDR2","STRING","NULLABLE","Owner's Mailing Address – Line 2"),
bigquery.SchemaField("OWN_CITY","STRING","NULLABLE","Owner's Mailing Address – City"),
bigquery.SchemaField("OWN_STATE","STRING","NULLABLE","Owner's Mailing Address – State"),
bigquery.SchemaField("OWN_ZIPCD","STRING","NULLABLE","Owner's Mailing Address – US ZIP Code"),
bigquery.SchemaField("OWN_STATE_DOM","STRING","NULLABLE","Owner's State of Domicile"),
bigquery.SchemaField("FIDU_NAME","STRING","NULLABLE","Fiduciary's Name"),
bigquery.SchemaField("FIDU_ADDR1","STRING","NULLABLE","Fiduciary's Mailing Address – Line 1"),
bigquery.SchemaField("FIDU_ADDR2","STRING","NULLABLE","Fiduciary's Mailing Address – Line 2"),
bigquery.SchemaField("FIDU_CITY","STRING","NULLABLE","Fiduciary's Mailing Address – City"),
bigquery.SchemaField("FIDU_STATE","STRING","NULLABLE","Fiduciary's Mailing Address – State"),
bigquery.SchemaField("FIDU_ZIPCD","STRING","NULLABLE","Fiduciary's Mailing Address – US ZIP Code"),
bigquery.SchemaField("FIDU_CD","STRING","NULLABLE","Fiduciary Code"),
bigquery.SchemaField("S_LEGAL","STRING","NULLABLE","Short Legal Description"),
bigquery.SchemaField("APP_STAT","STRING","NULLABLE","Homestead Applicant’s Status"),
bigquery.SchemaField("CO_APP_STAT","STRING","NULLABLE","Homestead Co-Applicant’s Status"),
bigquery.SchemaField("MKT_AR","STRING","NULLABLE","Market Area Code"),
bigquery.SchemaField("NBRHD_CD","STRING","NULLABLE","Neighborhood Code"),
bigquery.SchemaField("PUBLIC_LND","STRING","NULLABLE","Public Land"),
bigquery.SchemaField("TAX_AUTH_CD","STRING","NULLABLE","Taxing Authority Code"),
bigquery.SchemaField("TWN","STRING","NULLABLE","Township Number"),
bigquery.SchemaField("RNG","STRING","NULLABLE","Range Number"),
bigquery.SchemaField("SEC","STRING","NULLABLE","Section or Grant Number"),
bigquery.SchemaField("CENSUS_BK","STRING","NULLABLE","Census Block Group Number"),
bigquery.SchemaField("PHY_ADDR1","STRING","NULLABLE","Physical Address – Line 1"),
bigquery.SchemaField("PHY_ADDR2","STRING","NULLABLE","Physical Address – Line 2"),
bigquery.SchemaField("PHY_CITY","STRING","NULLABLE","Physical Location – City"),
bigquery.SchemaField("PHY_ZIPCD","STRING","NULLABLE","Physical Location – US ZIP Code"),
bigquery.SchemaField("ALT_KEY","STRING","NULLABLE","Alternate Key Number"),
bigquery.SchemaField("ASS_TRNSFR_FG","STRING","NULLABLE","Assessment Differential Transfer Flag"),
bigquery.SchemaField("PREV_HMSTD_OWN","STRING","NULLABLE","Number of Owners – Previous Homestead"),
bigquery.SchemaField("ASS_DIF_TRNS","STRING","NULLABLE","Assessment Differential Transferred"),
bigquery.SchemaField("CONO_PRV_HM","STRING","NULLABLE","County Number Previous Homestead"),
bigquery.SchemaField("PARCEL_ID_PRV_HMSTD","STRING","NULLABLE","Parcel ID – Previous Homestead"),
bigquery.SchemaField("YR_VAL_TRNSF","STRING","NULLABLE","Year Value Transferred"),
bigquery.SchemaField("EXMPT_01","INTEGER","NULLABLE","Value of homestead exemption"),
bigquery.SchemaField("EXMPT_02","INTEGER","NULLABLE","Value of additional homestead exemption"),
bigquery.SchemaField("EXMPT_03","INTEGER","NULLABLE","Value of county determined additional exemption for low-income seniors"),
bigquery.SchemaField("EXMPT_04","INTEGER","NULLABLE","Value of municipality determined additional exemption for low-income seniors"),
bigquery.SchemaField("EXMPT_05","INTEGER","NULLABLE","Value of exemptions for disabled veterans and their surviving spouses"),
bigquery.SchemaField("EXMPT_06","INTEGER","NULLABLE","Value of exemption for disabled veterans confined to wheelchairs"),
bigquery.SchemaField("EXMPT_07","INTEGER","NULLABLE","Value of exemption for a licensed child care facility operating in an enterprise zone"),
bigquery.SchemaField("EXMPT_08","INTEGER","NULLABLE","Value of exemption for totally and permanently disabled persons"),
bigquery.SchemaField("EXMPT_09","INTEGER","NULLABLE","Value of constitutional charitable, religious, scientific or literary exemption"),
bigquery.SchemaField("EXMPT_10","INTEGER","NULLABLE","Value of county adopted exemption for historic property"),
bigquery.SchemaField("EXMPT_11","INTEGER","NULLABLE","Value of municipality determined exemption for historic property "),
bigquery.SchemaField("EXMPT_12","INTEGER","NULLABLE","Value of exemption for certain property used by hospitals"),
bigquery.SchemaField("EXMPT_13","INTEGER","NULLABLE","Value of exemption for certain property used by nonprofit homes for the aged"),
bigquery.SchemaField("EXMPT_14","INTEGER","NULLABLE","Value of exemption for property used by proprietary continuing care facilities"),
bigquery.SchemaField("EXMPT_15","INTEGER","NULLABLE","Affordable housing property exemption"),
bigquery.SchemaField("EXMPT_16","INTEGER","NULLABLE","Value of educational property exemption"),
bigquery.SchemaField("EXMPT_17","INTEGER","NULLABLE","Value of charter school property tax exemption"),
bigquery.SchemaField("EXMPT_18","INTEGER","NULLABLE","Value of labor organization property tax exemption"),
bigquery.SchemaField("EXMPT_19","INTEGER","NULLABLE","Value of community center property tax exemption"),
bigquery.SchemaField("EXMPT_20","INTEGER","NULLABLE","Value of government property tax exemption"),
bigquery.SchemaField("EXMPT_21","INTEGER","NULLABLE","Value of exemption for property under certain agreements with local governments"),
bigquery.SchemaField("EXMPT_22","INTEGER","NULLABLE","Value of county economic development ad valorem tax exemptions"),
bigquery.SchemaField("EXMPT_23","INTEGER","NULLABLE","Value of municipality economic development ad valorem tax exemptions"),
bigquery.SchemaField("EXMPT_24","INTEGER","NULLABLE","Value of county ad valorem exemptions for historic property improvements"),
bigquery.SchemaField("EXMPT_25","INTEGER","NULLABLE","Value of municipality ad valorem exemptions for historic property improvements"),
bigquery.SchemaField("EXMPT_26","INTEGER","NULLABLE","Value of county additional ad valorem tax exemptions for historic properties open to the public"),
bigquery.SchemaField("EXMPT_27","INTEGER","NULLABLE","Value of municipality additional ad valorem tax exemptions for historic properties open to the public"),
bigquery.SchemaField("EXMPT_28","INTEGER","NULLABLE","No longer in use"),
bigquery.SchemaField("EXMPT_29","INTEGER","NULLABLE","Value of not-for-profit sewer and water company property tax exemption"),
bigquery.SchemaField("EXMPT_30","INTEGER","NULLABLE","Value of property tax exemption for s. 501(c)(12) not-for-profit water and wastewater systems"),
bigquery.SchemaField("EXMPT_31","INTEGER","NULLABLE","Value of property tax exemption for blind persons"),
bigquery.SchemaField("EXMPT_32","INTEGER","NULLABLE","Value of property tax exemption for widowers"),
bigquery.SchemaField("EXMPT_33","INTEGER","NULLABLE","Value of property tax exemption for widows"),
bigquery.SchemaField("EXMPT_34","INTEGER","NULLABLE","Value of property tax exemption of persons totally and permanently disabled"),
bigquery.SchemaField("EXMPT_35","INTEGER","NULLABLE","Value of property tax exemption for disabled ex-service member"),
bigquery.SchemaField("EXMPT_36","INTEGER","NULLABLE","Land dedicated in perpetuity for conservation purposes"),
bigquery.SchemaField("EXMPT_37","INTEGER","NULLABLE","Land dedicated in perpetuity for conservation purposes but also used for commercial purposes"),
bigquery.SchemaField("EXMPT_38","INTEGER","NULLABLE","Value of property tax exemption for homestead property owned by persons who are deployed military personnel outside the U.S."),
bigquery.SchemaField("EXMPT_39","INTEGER","NULLABLE","County adopted additional exemption for low-income seniors"),
bigquery.SchemaField("EXMPT_40","INTEGER","NULLABLE","Municipality adopted additional exemption for low-income seniors"),
bigquery.SchemaField("EXMPT_41","INTEGER","NULLABLE","Exemption for first responder"),
bigquery.SchemaField("EXMPT_80","INTEGER","NULLABLE","Disabled Veterans Homestead Discount"),
bigquery.SchemaField("EXMPT_81","INTEGER","NULLABLE","Reduction in assessment for living quarters of parents or grandparents"),
bigquery.SchemaField("EXMPT_82","INTEGER","NULLABLE","Lands Available for Taxes"),
bigquery.SchemaField("SEQ_NO","STRING","NULLABLE","File Sequence Number"),
bigquery.SchemaField("RS_ID","STRING","NULLABLE","Real Property Submission Identification Code"),
bigquery.SchemaField("MP_ID","STRING","NULLABLE","Master Parcel Identification Code"),
bigquery.SchemaField("STATE_PAR_ID","STRING","NULLABLE","Uniform Parcel Identification Code"),
bigquery.SchemaField("SPC_CIR_CD","STRING","NULLABLE","Special Circumstances Code"),
bigquery.SchemaField("SPC_CIR_YR","STRING","NULLABLE","Special Circumstances Year"),
bigquery.SchemaField("SPC_CIR_TXT","STRING","NULLABLE","Special Circumstances Text"),
bigquery.SchemaField("COUNTY_NAME","STRING","REQUIRED","County Name (decode of CO_NO)"),
bigquery.SchemaField("USAGE","STRING","NULLABLE","Parcel Usage (decode of DOR_UC)"),
bigquery.SchemaField("SALE_TYPE1","STRING","NULLABLE","Sale Type (decode of QUAL_CD)"),
bigquery.SchemaField("SALE_DESC1","STRING","NULLABLE","Sale Description (decode of QUAL_CD)"),
bigquery.SchemaField("SALE_TYPE2","STRING","NULLABLE","Sale Type (decode of QUAL_CD)"),
bigquery.SchemaField("SALE_DESC2","STRING","NULLABLE","Sale Description (decode of QUAL_CD)"),
bigquery.SchemaField("PUMA","STRING","NULLABLE","Census Public Use Microdata Area"),
bigquery.SchemaField("GEO_COORDS","GEOGRAPHY","NULLABLE","Geospatial Coordinates of Parcel"),
]
job_config.skip_leading_rows = 1
# The source format defaults to CSV, so the line below is optional.
job_config.source_format = bigquery.SourceFormat.CSV
job_config.max_bad_records = 12000
uri = "gs://visulate-dor/2018/nal2d/NAL*.csv"

	

load_job = client.load_table_from_uri(
    uri, dataset_ref.table("nal2018"), job_config=job_config
)  # API request
print("Starting job {}".format(load_job.job_id))

load_job.result()  # Waits for table load to complete.
print("Job finished.")

destination_table = client.get_table(dataset_ref.table("nal2018"))
print("Loaded {} rows.".format(destination_table.num_rows))
